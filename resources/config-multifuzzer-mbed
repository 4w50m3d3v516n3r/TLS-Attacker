<startupCommandsHolder>
    <serverCommand>../../servers/mbedtls-2.0.0/programs/ssl/ssl_server2 </serverCommand>
    <startupCommandsList>
        <startupCommands>
            <fuzzerCommand>simple_fuzzer -connect localhost:54000 -workflow_trace_type FULL -server_name test.de  -max_fragment_length 4 -modified_variable_types TLS_CONSTANT,LENGTH,COUNT,PUBLIC_KEY,CERTIFICATE,PADDING,SIGNATURE,PUBLIC_KEY,PLAIN_PROTOCOL_MESSAGE -cipher TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256 -tls_timeout 200</fuzzerCommand>
            <serverCommandParameters> server_port=54000 key_file=../resources/rsa1024key.pem crt_file=../resources/rsa1024cert.pem</serverCommandParameters>
            <shortName>mbedtls-rsa</shortName>
        </startupCommands>
<!-- client auth does not work properly, still we can try it -->
        <startupCommands>
            <fuzzerCommand>simple_fuzzer -connect localhost:54001 -max_fragment_length 4 -workflow_trace_type FULL -server_name test.de  -modified_variable_types TLS_CONSTANT,LENGTH,COUNT,PUBLIC_KEY,CERTIFICATE,PADDING,SIGNATURE,PUBLIC_KEY,PLAIN_PROTOCOL_MESSAGE -keystore ../resources/rsa1024.jks -password password -alias alias -cipher TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256 -tls_timeout 200</fuzzerCommand>
            <serverCommandParameters> server_port=54001 key_file=../resources/rsa1024key.pem crt_file=../resources/rsa1024cert.pem auth_mode=required</serverCommandParameters>
            <shortName>mbedtls-rsa-auth</shortName>
        </startupCommands>
       <startupCommands>
            <fuzzerCommand>simple_fuzzer -connect localhost:54002 -workflow_trace_type FULL -server_name test.de  -modified_variable_types TLS_CONSTANT,LENGTH,COUNT,PUBLIC_KEY,CERTIFICATE,PADDING,SIGNATURE,PUBLIC_KEY,PLAIN_PROTOCOL_MESSAGE -cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -tls_timeout 200</fuzzerCommand>
            <serverCommandParameters> server_port=54002 key_file=../resources/rsa1024key.pem crt_file=../resources/rsa1024cert.pem</serverCommandParameters>
            <shortName>mbedtls-ecdhe-rsa</shortName>
        </startupCommands>
        <startupCommands>
            <fuzzerCommand>simple_fuzzer -connect localhost:54003 -workflow_trace_type FULL -server_name test.de  -modified_variable_types TLS_CONSTANT,LENGTH,COUNT,PUBLIC_KEY,CERTIFICATE,PADDING,SIGNATURE,PUBLIC_KEY,PLAIN_PROTOCOL_MESSAGE -cipher TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -tls_timeout 200</fuzzerCommand>
            <serverCommandParameters> server_port=54003 key_file=../resources/rsa1024key.pem crt_file=../resources/rsa1024cert.pem</serverCommandParameters>
            <shortName>mbedtls-dhe-rsa</shortName>
        </startupCommands>
        <startupCommands>
            <fuzzerCommand>simple_fuzzer -connect localhost:54004 -workflow_trace_type FULL -server_name test.de  -modified_variable_types TLS_CONSTANT,LENGTH,COUNT,PUBLIC_KEY,CERTIFICATE,PADDING,SIGNATURE,PUBLIC_KEY,PLAIN_PROTOCOL_MESSAGE  -cipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -tls_timeout 200</fuzzerCommand>
            <serverCommandParameters>  server_port=54004 key_file=../resources/ec256key.pem crt_file=../resources/ec256cert.pem </serverCommandParameters>
            <shortName>mbedtls-ecdhe-ecdsa</shortName>
        </startupCommands>
        <startupCommands>
            <fuzzerCommand>simple_fuzzer -connect localhost:54005 -workflow_trace_type FULL -server_name test.de  -modified_variable_types TLS_CONSTANT,LENGTH,COUNT,PUBLIC_KEY,CERTIFICATE,PADDING,SIGNATURE,PUBLIC_KEY,PLAIN_PROTOCOL_MESSAGE -keystore ../resources/ec256.jks -password password -alias alias -cipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -tls_timeout 200</fuzzerCommand>
            <serverCommandParameters> server_port=54005 key_file=../resources/ec256key.pem crt_file=../resources/ec256cert.pem auth_mode=required</serverCommandParameters>
            <shortName>mbedtls-ecdhe-ecdsa-auth</shortName>
        </startupCommands>
<!-- dsa keys do not work, after starting the server, the server logs: Signature algorithm (oid) is unsupported
        <startupCommands>
            <fuzzerCommand>simple_fuzzer -connect localhost:54006 -workflow_trace_type FULL -server_name test.de  -modified_variable_types TLS_CONSTANT,LENGTH,COUNT,PUBLIC_KEY,CERTIFICATE,PADDING,SIGNATURE,PUBLIC_KEY,PLAIN_PROTOCOL_MESSAGE  -cipher TLS_DHE_DSS_WITH_AES_256_CBC_SHA,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</fuzzerCommand>
            <serverCommandParameters>s_server -quiet -accept 54006 -key ../resources/dsakey.pem -cert ../resources/dsacert.pem </serverCommandParameters>
            <shortName>mbedtls-dsa</shortName>
        </startupCommands> -->
    </startupCommandsList>
</startupCommandsHolder>